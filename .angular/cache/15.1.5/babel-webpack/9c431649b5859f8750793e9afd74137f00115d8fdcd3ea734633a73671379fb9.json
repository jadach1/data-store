{"ast":null,"code":"import { Hero } from '../../Models/hero';\nimport * as HeroActions from '../Store/heroes.actions';\nconst initialState = {\n  Heroes: [new Hero('Maneesh', '198', 'India', ['technical analysis', 'extreme focus']), new Hero('Xin', '176', 'China', ['Power', 'Geometry'])],\n  editedHero: null,\n  editedHeroIndex: -1\n};\nexport function heroesReducer(state = initialState, action) {\n  switch (action.type) {\n    /***************ADD NEW HERO ****************/\n    case HeroActions.ADD_HERO:\n      //state changes must be immutable, return a new object\n      return {\n        ...state,\n        Heroes: [...state.Heroes, action.payload]\n      };\n    /***************ADD HEROES ****************/\n    case HeroActions.ADD_HEROES:\n      return {\n        ...state,\n        Heroes: [...state.Heroes, ...action.payload]\n      };\n    /***************UPDATE ****************/\n    case HeroActions.UPDATE_HERO:\n      // copy existing hero\n      const hero = state.editedHero;\n      //create object with old and new hero\n      const updatedHero = {\n        ...hero,\n        ...action.payload.hero\n      };\n      //copy old heroes array\n      const updatedHeroes = [...state.Heroes];\n      //make necessary change            \n      updatedHeroes[state.editedHeroIndex] = updatedHero;\n      //return updated state\n      return {\n        ...state,\n        Heroes: updatedHeroes\n      };\n    /***************EDIT START ****************/\n    case HeroActions.EDIT_START:\n      const index = action.payload;\n      const heroToEdit = {\n        ...state.Heroes[index]\n      };\n      //    console.log(state.editedHeroIndex)\n      return {\n        ...state,\n        editedHeroIndex: index,\n        editedHero: heroToEdit\n      };\n    /***************EDIT FINISH ****************/\n    case HeroActions.EDIT_FINISH:\n      return {\n        ...state,\n        editedHeroIndex: -1,\n        editedHero: null\n      };\n    /***************DELETE ****************/\n    case HeroActions.DELETE_HERO:\n      return {\n        ...state,\n        Heroes: state.Heroes.filter((hero, index) => {\n          return index !== action.payload;\n        })\n      };\n    default:\n      return state;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAQA,IAAI,QAAO,mBAAmB;AAEtC,OAAO,KAAKC,WAAW,MAAM,yBAAyB;AAYtD,MAAMC,YAAY,GAAW;EACzBC,MAAM,EAAE,CACI,IAAIH,IAAI,CAAC,SAAS,EAAC,KAAK,EAAC,OAAO,EAAC,CAAC,oBAAoB,EAAC,eAAe,CAAC,CAAC,EACxE,IAAIA,IAAI,CAAC,KAAK,EAAC,KAAK,EAAC,OAAO,EAAC,CAAC,OAAO,EAAC,UAAU,CAAC,CAAC,CACrD;EACTI,UAAU,EAAE,IAAI;EAChBC,eAAe,EAAE,CAAC;CACrB;AAGD,OAAM,SAAUC,aAAa,CAACC,QAAeL,YAAY,EAC3BM,MAA+B;EAGzD,QAAQA,MAAM,CAACC,IAAI;IAEd;IACD,KAAKR,WAAW,CAACS,QAAQ;MACpB;MACD,OAAO;QACH,GAAGH,KAAK;QACRJ,MAAM,EAAE,CAAC,GAAGI,KAAK,CAACJ,MAAM,EAAEK,MAAM,CAACG,OAAO;OAC3C;IAEL;IACA,KAAKV,WAAW,CAACW,UAAU;MACvB,OAAO;QACH,GAAGL,KAAK;QAAEJ,MAAM,EAAE,CAAC,GAAGI,KAAK,CAACJ,MAAM,EAAE,GAAIK,MAAM,CAACG,OAAkB;OACpE;IAEL;IACA,KAAKV,WAAW,CAACY,WAAW;MAExB;MACC,MAAMC,IAAI,GAAGP,KAAK,CAACH,UAAU;MAE9B;MACC,MAAMW,WAAW,GAAG;QACjB,GAAGD,IAAI;QACP,GAAGN,MAAM,CAACG,OAAO,CAACG;OACpB;MAEF;MACC,MAAME,aAAa,GAAG,CAAC,GAAGT,KAAK,CAACJ,MAAM,CAAC;MAExC;MACCa,aAAa,CAACT,KAAK,CAACF,eAAe,CAAC,GAAGU,WAAW;MAEnD;MACC,OAAO;QACJ,GAAGR,KAAK;QAAEJ,MAAM,EAAEa;OACpB;IAEN;IACA,KAAKf,WAAW,CAACgB,UAAU;MACxB,MAAMC,KAAK,GAAGV,MAAM,CAACG,OAAO;MAC5B,MAAMQ,UAAU,GAAG;QAAC,GAAGZ,KAAK,CAACJ,MAAM,CAACe,KAAK;MAAC,CAAC;MAC9C;MACI,OAAO;QAAE,GAAGX,KAAK;QACTF,eAAe,EAAEa,KAAK;QACtBd,UAAU,EAAEe;MAAU,CAAC;IAElC;IACD,KAAKlB,WAAW,CAACmB,WAAW;MACxB,OAAO;QACH,GAAGb,KAAK;QACRF,eAAe,EAAE,CAAC,CAAC;QACnBD,UAAU,EAAE;OACf;IAEJ;IACD,KAAKH,WAAW,CAACoB,WAAW;MACxB,OAAO;QACH,GAAGd,KAAK;QACTJ,MAAM,EAAEI,KAAK,CAACJ,MAAM,CAACmB,MAAM,CAAC,CAACR,IAAI,EAAEI,KAAK,KAAI;UAC3C,OAAOA,KAAK,KAAKV,MAAM,CAACG,OAAO;QAChC,CAAC;OACH;IACJ;MACG,OAAOJ,KAAK;EAAA;AAGxB","names":["Hero","HeroActions","initialState","Heroes","editedHero","editedHeroIndex","heroesReducer","state","action","type","ADD_HERO","payload","ADD_HEROES","UPDATE_HERO","hero","updatedHero","updatedHeroes","EDIT_START","index","heroToEdit","EDIT_FINISH","DELETE_HERO","filter"],"sourceRoot":"","sources":["C:\\Users\\jacob\\Desktop\\developmentProjects\\angularTest\\data-store\\src\\app\\heroes\\Store\\heroes.reducer.ts"],"sourcesContent":["import {Hero} from '../../Models/hero'\n\nimport * as HeroActions from '../Store/heroes.actions'\n\nexport interface AppState{\n    heroList: State;\n}\n\nexport interface State{\n    Heroes: Hero[];\n    editedHero: Hero;\n    editedHeroIndex: number;\n}\n\nconst initialState: State  = {\n    Heroes: [\n                new Hero('Maneesh','198','India',['technical analysis','extreme focus']),\n                new Hero('Xin','176','China',['Power','Geometry'])\n            ],\n    editedHero: null,\n    editedHeroIndex: -1,\n}\n\n\nexport function heroesReducer(state: State = initialState, \n                              action: HeroActions.HeroActions) \n{\n\n    switch (action.type) {\n\n         /***************ADD NEW HERO ****************/\n        case HeroActions.ADD_HERO:\n             //state changes must be immutable, return a new object\n            return {\n                ...state,\n                Heroes: [...state.Heroes, action.payload]\n            }\n\n        /***************ADD HEROES ****************/\n        case HeroActions.ADD_HEROES:\n            return {\n                ...state, Heroes: [...state.Heroes, ...(action.payload as Hero[])]\n            }\n\n        /***************UPDATE ****************/\n        case HeroActions.UPDATE_HERO:\n\n            // copy existing hero\n             const hero = state.editedHero;\n            \n            //create object with old and new hero\n             const updatedHero = {\n                ...hero,\n                ...action.payload.hero\n             }\n\n            //copy old heroes array\n             const updatedHeroes = [...state.Heroes];\n\n            //make necessary change            \n             updatedHeroes[state.editedHeroIndex] = updatedHero;\n\n            //return updated state\n             return {\n                ...state, Heroes: updatedHeroes\n             }\n\n        /***************EDIT START ****************/\n        case HeroActions.EDIT_START:\n           const index = action.payload;\n           const heroToEdit = {...state.Heroes[index]}\n        //    console.log(state.editedHeroIndex)\n            return { ...state, \n                    editedHeroIndex: index, \n                    editedHero: heroToEdit}\n        \n         /***************EDIT FINISH ****************/\n        case HeroActions.EDIT_FINISH:\n            return {\n                ...state,\n                editedHeroIndex: -1,\n                editedHero: null\n            }\n\n         /***************DELETE ****************/\n        case HeroActions.DELETE_HERO:\n            return {\n                ...state,\n               Heroes: state.Heroes.filter((hero, index) => {\n                return index !== action.payload;\n               })\n            }\n         default :\n            return state\n                \n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}