{"ast":null,"code":"import * as HeroActions from '../heroes/Store/heroes.actions';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport class HeroesService {\n  // heroes:Hero[] = [];\n  constructor(store) {\n    this.store = store;\n  }\n  ngOnInit() {\n    this.store.select('heroList').subscribe({\n      next: heroesStatus => this.heroesStatus = heroesStatus,\n      error: err => console.log(err),\n      complete: () => Swal.fire('Heroes Have Arrived from their HeadQuarters!')\n    });\n  }\n  /*RETURN ALL HEROES */\n  getHeroes() {\n    return this.heroesStatus.Heroes;\n  }\n  addHero(hero) {\n    this.store.dispatch(new HeroActions.AddHero(hero));\n  }\n  addHeroes(heroes) {\n    this.store.dispatch(new HeroActions.AddHeroes(heroes));\n  }\n  /*RETURN A HERO WE WISH TO EDIT */\n  getHeroToEdit() {\n    let index = this.heroesStatus.editedHeroIndex;\n    if (index != -1) return this.heroesStatus.Heroes[index];else return null;\n  }\n  /*UPDATE A HERO WE HAVE HERE */\n  updateHero(newHero) {\n    this.store.dispatch(new HeroActions.UpdateHero({\n      index: newHero.id,\n      hero: newHero\n    }));\n  }\n}\nHeroesService.ɵfac = function HeroesService_Factory(t) {\n  return new (t || HeroesService)(i0.ɵɵinject(i1.Store));\n};\nHeroesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroesService,\n  factory: HeroesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,OAAO,KAAKA,WAAW,MAAM,gCAAgC;AAE7D,OAAOC,IAAI,MAAM,aAAa;;;AAM9B,OAAM,MAAOC,aAAa;EAIzB;EAECC,YAAoBC,KAAmC;IAAnC,UAAK,GAALA,KAAK;EAAkC;EAE3DC,QAAQ;IACN,IAAI,CAACD,KAAK,CAACE,MAAM,CAAC,UAAU,CAAC,CAACC,SAAS,CAAC;MACtCC,IAAI,EAAGC,YAAY,IAAK,IAAI,CAACA,YAAY,GAAGA,YAAY;MACxDC,KAAK,EAAGC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChCG,QAAQ,EAAE,MAAKb,IAAI,CAACc,IAAI,CAAC,8CAA8C;KACxE,CAAC;EACJ;EAEA;EACAC,SAAS;IACP,OAAO,IAAI,CAACP,YAAY,CAACQ,MAAM;EACjC;EAEAC,OAAO,CAACC,IAAU;IAChB,IAAI,CAACf,KAAK,CAACgB,QAAQ,CAAC,IAAIpB,WAAW,CAACqB,OAAO,CAACF,IAAI,CAAC,CAAC;EACpD;EAEAG,SAAS,CAACC,MAAc;IACtB,IAAI,CAACnB,KAAK,CAACgB,QAAQ,CAAC,IAAIpB,WAAW,CAACwB,SAAS,CAACD,MAAM,CAAC,CAAC;EACxD;EAEA;EACAE,aAAa;IACX,IAAIC,KAAK,GAAG,IAAI,CAACjB,YAAY,CAACkB,eAAe;IAC7C,IAAID,KAAK,IAAI,CAAC,CAAC,EACb,OAAO,IAAI,CAACjB,YAAY,CAACQ,MAAM,CAACS,KAAK,CAAC,CAAC,KAEvC,OAAO,IAAI;EACf;EAEA;EACAE,UAAU,CAACC,OAAa;IACtB,IAAI,CAACzB,KAAK,CAACgB,QAAQ,CAAC,IAAIpB,WAAW,CAAC8B,UAAU,CAAC;MAACJ,KAAK,EAAEG,OAAO,CAACE,EAAE;MAAEZ,IAAI,EAAEU;IAAO,CAAC,CAAC,CAAC;EACrF;;AAzCW3B,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAA8B,SAAb9B,aAAa;EAAA+B,YAFZ;AAAM","names":["HeroActions","Swal","HeroesService","constructor","store","ngOnInit","select","subscribe","next","heroesStatus","error","err","console","log","complete","fire","getHeroes","Heroes","addHero","hero","dispatch","AddHero","addHeroes","heroes","AddHeroes","getHeroToEdit","index","editedHeroIndex","updateHero","newHero","UpdateHero","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\jacob\\Desktop\\developmentProjects\\angularTest\\data-store\\src\\app\\service\\heroes.service.ts"],"sourcesContent":["import {Injectable, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport * as fromHeroList from '../heroes/Store/heroes.reducer'\nimport * as HeroActions from '../heroes/Store/heroes.actions'\nimport {Hero} from '../Models/hero'\nimport Swal from 'sweetalert2'\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroesService implements OnInit{\n\n  // Save the State \n  heroesStatus: fromHeroList.State;\n // heroes:Hero[] = [];\n\n  constructor(private store: Store<fromHeroList.AppState>) { }\n\n  ngOnInit(): void {\n    this.store.select('heroList').subscribe({\n      next: (heroesStatus) => this.heroesStatus = heroesStatus,\n      error: (err) => console.log(err),\n      complete: ()=> Swal.fire('Heroes Have Arrived from their HeadQuarters!')\n    })\n  }\n\n  /*RETURN ALL HEROES */\n  getHeroes(): Hero[] {\n    return this.heroesStatus.Heroes;\n  }\n\n  addHero(hero: Hero) {\n    this.store.dispatch(new HeroActions.AddHero(hero))\n  }\n\n  addHeroes(heroes: Hero[]) {\n    this.store.dispatch(new HeroActions.AddHeroes(heroes))\n  }\n\n  /*RETURN A HERO WE WISH TO EDIT */\n  getHeroToEdit(): Hero{\n    let index = this.heroesStatus.editedHeroIndex;\n    if (index != -1)\n      return this.heroesStatus.Heroes[index];\n    else\n      return null\n  }\n\n  /*UPDATE A HERO WE HAVE HERE */\n  updateHero(newHero: Hero) {\n    this.store.dispatch(new HeroActions.UpdateHero({index: newHero.id, hero: newHero}))\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}